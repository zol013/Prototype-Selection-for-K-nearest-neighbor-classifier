{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"Se-CbsvORFXU"},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import random\n","from keras.datasets import mnist\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.cluster import KMeans\n","from matplotlib import pyplot as plt\n","from sklearn import metrics"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zshfr-f8viAV"},"outputs":[],"source":["import imblearn"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2479,"status":"ok","timestamp":1706682074373,"user":{"displayName":"Zongze Liu","userId":"04023661631906577122"},"user_tz":480},"id":"Y_oYF1qORohY","outputId":"9f044a04-05af-4362-e258-5022bf0df215"},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n","11490434/11490434 [==============================] - 0s 0us/step\n"]}],"source":["(x_train, y_train), (x_test, y_test) = mnist.load_data()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5,"status":"ok","timestamp":1706682074374,"user":{"displayName":"Zongze Liu","userId":"04023661631906577122"},"user_tz":480},"id":"djd1qXAxyMT6","outputId":"4cef5466-dc15-4bd5-a1a3-3a7d7dde215a"},"outputs":[{"name":"stdout","output_type":"stream","text":["x_train_shape: (60000, 784)\n","y_train_shape: (60000,)\n","x_test_shape: (10000, 784)\n","y_test_shape: (10000,)\n"]}],"source":["x_train = x_train.reshape((len(x_train),-1))\n","x_test = x_test.reshape((len(x_test),-1))\n","print('x_train_shape:', x_train.shape)\n","print('y_train_shape:', y_train.shape)\n","print('x_test_shape:', x_test.shape)\n","print('y_test_shape:', y_test.shape)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"A9RiiOPDUB-3"},"outputs":[],"source":["def generate_subsamples(x_train, y_train, M):\n","  from collections import Counter\n","  freq = Counter(y_train)\n","  label_ratios = {label: cnt / len(y_train) for label, cnt in freq.items()}\n","  classes = [i for i in range(10)]\n","  label_idx = {i:np.argwhere(y_train==i).flatten() for i in classes}\n","\n","  sub_idx = []\n","  for i in classes:\n","    label_size = int(M * label_ratios[i])\n","    rand_idx = np.random.choice(len(label_idx[i]), replace = False, size=label_size)\n","    sub_idx += list(label_idx[i][rand_idx])\n","  x_train_sub = x_train[sub_idx]\n","  y_train_sub = y_train[sub_idx]\n","  M = len(sub_idx)\n","  return x_train_sub, y_train_sub, M"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1shUrL8KUQ2h"},"outputs":[],"source":["def generate_prototypes(x_train_sub, y_train_sub, M, num_of_centroids):\n","  classes = [i for i in range(10)]\n","  shape = tuple([M] + [i for i in x_train_sub.shape[1:]])\n","  prototypes_x = np.zeros(shape)\n","  prototypes_y = np.zeros(M,)\n","  start = 0\n","  for label in classes:\n","    x_train_label = x_train_sub[np.argwhere(y_train_sub==label)]\n","    shape = x_train_label.shape\n","    x_train_label = x_train_label.reshape(-1, np.size(x_train_label[0]))\n","    kmeans = KMeans(n_clusters=num_of_centroids, n_init='auto').fit(x_train_label)\n","    centroids = kmeans.cluster_centers_\n","    shape2 = tuple([len(centroids)] + [i for i in shape[1:]])\n","    centroids.reshape(shape2)\n","    prototypes_x[start:start + len(centroids)] = centroids\n","    prototypes_y[start:start + len(centroids)] = [label] * len(centroids)\n","    start += len(centroids)\n","  return prototypes_x, prototypes_y"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"V00LNjK_Ut1o"},"outputs":[],"source":["def optimal_num_of_centroids(x_train, y_train, folds = 10):\n","  centroid_accuracy = {}\n","  from sklearn.model_selection import KFold\n","  prev_acc = 0\n","  best_acc = 0\n","  for num_of_centroids in range(10, len(x_train)//10, 20):\n","    test_acc = []\n","    kf = KFold(n_splits = folds, random_state=1, shuffle=True)\n","    for train_idx, test_idx in kf.split(x_train):\n","      x_train_cv, y_train_cv = x_train[train_idx], y_train[train_idx]\n","      x_test_cv, y_test_cv = x_train[test_idx], y_train[test_idx]\n","      prototypes_x, prototypes_y= generate_prototypes(x_train_cv, y_train_cv, len(x_train_cv), num_of_centroids)\n","      test_acc.append(knn(prototypes_x, prototypes_y, x_test_cv, y_test_cv))\n","    acc = np.average(test_acc)\n","    centroid_accuracy[num_of_centroids] = acc\n","    best_acc = max(best_acc, acc)\n","    if abs(acc - prev_acc) \u003c= 1e-5:\n","      break\n","    prev_acc = acc\n","  for num, acc in centroid_accuracy.items():\n","    if acc == best_acc:\n","      return num, centroid_accuracy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-MnoAnrf6cM8"},"outputs":[],"source":["def knn(x_train, y_train, x_test, y_test, k=1):\n","  knn = KNeighborsClassifier(n_neighbors = k)\n","  knn.fit(x_train, y_train)\n","  y_pred = knn.predict(x_test)\n","\n","  test_acc = metrics.accuracy_score(y_pred, y_test)\n","  print(test_acc)\n","  return test_acc * 100"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Lf77dHgSkr9j"},"outputs":[],"source":["def protoptype_selection(x_train, y_train, M=500, num_of_centroids = 8):\n","  from collections import Counter\n","  freq = Counter(y_train)\n","  label_ratios = {label: cnt / len(y_train) for label, cnt in freq.items()}\n","  classes = [i for i in range(10)]\n","  label_idx = {i:np.argwhere(y_train==i).flatten() for i in classes}\n","\n","  sub_idx = []\n","  for i in classes:\n","    label_size = int(M * label_ratios[i])\n","    rand_idx = np.random.choice(len(label_idx[i]), replace = False, size=label_size)\n","    sub_idx += list(label_idx[i][rand_idx])\n","  x_train_sub = x_train[sub_idx]\n","  y_train_sub = y_train[sub_idx]\n","  M = len(sub_idx)\n","  shape = tuple([M] + [i for i in x_train_sub.shape[1:]])\n","  prototypes_x = np.zeros(shape)\n","  prototypes_y = np.zeros(M,)\n","  start = 0\n","  for label in classes:\n","    x_train_label = x_train_sub[np.argwhere(y_train_sub==label)]\n","    shape = x_train_label.shape\n","    x_train_label = x_train_label.reshape(-1, np.size(x_train_label[0]))\n","    num_of_centroids = max(len(x_train_label)//3, num_of_centroids)\n","    kmeans = KMeans(n_clusters=num_of_centroids, n_init='auto').fit(x_train_label)\n","    centroids = kmeans.cluster_centers_\n","    shape2 = tuple([len(centroids)] + [i for i in shape[1:]])\n","    centroids.reshape(shape2)\n","    prototypes_x[start:start + len(centroids)] = centroids\n","    prototypes_y[start:start + len(centroids)] = [label] * len(centroids)\n","    start += len(centroids)\n","  return prototypes_x, prototypes_y, M"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qycdAx7ptyrp"},"outputs":[],"source":["prototypes_x, prototypes_y , M = protoptype_selection(x_train, y_train, M=500, num_of_centroids = 15)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nU4T7p59kr__"},"outputs":[],"source":["def calc_accuracy_std_dev(x_train, y_train, x_test, y_test, M=500, iterations = 5):\n","  prototype_accuracy_list = []\n","  random_accuracy_list = []\n","\n","  for _ in range(iterations):\n","    prototype_x, prototype_y, M = protoptype_selection(x_train, y_train, M)\n","    random_idx = np.random.choice(x_train.shape[0], replace = False, size=M)\n","    x_random = x_train[random_idx]\n","    y_random = y_train[random_idx]\n","    prototype_accuracy_list.append(knn(prototype_x, prototype_y, x_test, y_test))\n","    random_accuracy_list.append(knn(x_random, y_random, x_test, y_test))\n","  prototype_accuracy = np.average(prototype_accuracy_list)\n","  prototype_std_dev = np.std(prototype_accuracy_list)\n","\n","  random_accuracy = np.average(random_accuracy_list)\n","  random_std_dev = np.std(random_accuracy_list)\n","\n","  return prototype_accuracy, prototype_std_dev, random_accuracy, random_std_dev"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"gfnYPxV9ksC1"},"outputs":[],"source":["for M in [120, 200, 500, 800, 1000, 5000, 10000]:\n","  prototype_accuracy, prototype_std_dev, random_accuracy, random_std_dev = calc_accuracy_std_dev(x_train, y_train, x_test, y_test, M)\n","  print('M=',M)\n","  print('prototype selection accuracy:', prototype_accuracy)\n","  print('prototype selections standard deviation:',prototype_std_dev)\n","  print('random selection accuracy:', random_accuracy)\n","  print('random selection standard deviation:', random_std_dev)\n","  print('\\t')\n","  print('\\t')"]},{"cell_type":"code","execution_count":12,"metadata":{"executionInfo":{"elapsed":133,"status":"ok","timestamp":1706831088109,"user":{"displayName":"Zongze Liu","userId":"04023661631906577122"},"user_tz":480},"id":"1Do_TfKLO-2B"},"outputs":[],"source":["def calc_accuracy_std_dev_cnn(x_train, y_train, x_test, y_test, M=500, iterations = 5):\n","  from imblearn.under_sampling import CondensedNearestNeighbour\n","  cnn_accuracy_list = []\n","  random_accuracy_list = []\n","\n","  for _ in range(iterations):\n","    x_train_sub, y_train_sub, M = generate_subsamples(x_train, y_train, M)\n","    condensednn = CondensedNearestNeighbour(n_neighbors =1)\n","    x_train_res, y_train_res = condensednn.fit_resample(x_train_sub, y_train_sub)\n","    cnn_accuracy_list.append(knn(x_train_res, y_train_res, x_test, y_test, k=1))\n","    random_idx = np.random.choice(x_train.shape[0], replace = False, size=len(x_train_res))\n","    x_random = x_train[random_idx]\n","    y_random = y_train[random_idx]\n","    random_accuracy_list.append(knn(x_random, y_random, x_test, y_test))\n","  cnn_accuracy = np.average(cnn_accuracy_list)\n","  cnn_std_dev = np.std(cnn_accuracy_list)\n","\n","  random_accuracy = np.average(random_accuracy_list)\n","  random_std_dev = np.std(random_accuracy_list)\n","\n","  return cnn_accuracy, cnn_std_dev, random_accuracy, random_std_dev"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/","height":0},"id":"pG89-sCXksFL"},"outputs":[{"name":"stdout","output_type":"stream","text":["0.6334\n","0.6213\n","0.654\n","0.6491\n","0.5749\n","0.5825\n","0.6117\n","0.5682\n","0.554\n","0.5559\n","M= 120\n","condensed nearest neighbor accuracy: 60.56000000000002\n","condensed nearest neighbor standard deviation: 3.676318810984706\n","random selection accuracy: 59.54\n","random selection standard deviation: 3.4701584978210986\n","\t\n","\t\n","0.6501\n","0.6234\n","0.6809\n","0.5951\n","0.6806\n","0.6654\n","0.6653\n","0.5876\n","0.6922\n","0.6857\n","M= 200\n","condensed nearest neighbor accuracy: 67.38199999999999\n","condensed nearest neighbor standard deviation: 1.4622913526380408\n","random selection accuracy: 63.14399999999999\n","random selection standard deviation: 3.8482754579161798\n","\t\n","\t\n","0.7366\n","0.7382\n","0.7125\n","0.748\n","0.7321\n","0.7311\n","0.7424\n","0.7549\n","0.7373\n","0.7257\n","M= 500\n","condensed nearest neighbor accuracy: 73.218\n","condensed nearest neighbor standard deviation: 1.0368297835228284\n","random selection accuracy: 73.958\n","random selection standard deviation: 1.069642931075596\n","\t\n","\t\n","0.7783\n","0.7915\n","0.759\n","0.7882\n","0.7492\n","0.78\n","0.7152\n","0.7564\n","0.7577\n","0.7785\n","M= 800\n","condensed nearest neighbor accuracy: 75.18800000000002\n","condensed nearest neighbor standard deviation: 2.0664888095511205\n","random selection accuracy: 77.89200000000001\n","random selection standard deviation: 1.227084349178979\n","\t\n","\t\n","0.7514\n","0.7844\n","0.7621\n","0.7832\n","0.7654\n","0.768\n","0.7519\n","0.7729\n","0.7666\n","0.795\n","M= 1000\n","condensed nearest neighbor accuracy: 75.94800000000001\n","condensed nearest neighbor standard deviation: 0.6562743328822155\n","random selection accuracy: 78.07000000000001\n","random selection standard deviation: 0.9450502632135499\n","\t\n","\t\n","0.8049\n","0.879\n","0.8467\n","0.8833\n","0.8197\n","0.8835\n","0.8295\n","0.8854\n","0.8234\n","0.8833\n","M= 5000\n","condensed nearest neighbor accuracy: 82.484\n","condensed nearest neighbor standard deviation: 1.3606410253994277\n","random selection accuracy: 88.28999999999999\n","random selection standard deviation: 0.21042813500099772\n","\t\n","\t\n","0.8501\n","0.905\n","0.855\n","0.9042\n","0.8528\n","0.9092\n","0.8486\n","0.9116\n","0.8416\n","0.9063\n","M= 10000\n","condensed nearest neighbor accuracy: 84.96199999999999\n","condensed nearest neighbor standard deviation: 0.4574887976770591\n","random selection accuracy: 90.726\n","random selection standard deviation: 0.27565195446431995\n","\t\n","\t\n"]}],"source":["for M in [120, 200, 500, 800, 1000, 5000, 10000]:\n","  cnn_accuracy, cnn_std_dev, random_accuracy, random_std_dev = calc_accuracy_std_dev_cnn(x_train, y_train, x_test, y_test, M)\n","  print('M=',M)\n","  print('condensed nearest neighbor accuracy:', cnn_accuracy)\n","  print('condensed nearest neighbor standard deviation:',cnn_std_dev)\n","  print('random selection accuracy:', random_accuracy)\n","  print('random selection standard deviation:', random_std_dev)\n","  print('\\t')\n","  print('\\t')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"i-lpGPoeksHi"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CEFb8Lv-Rojz"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FhO_TP9LRomZ"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OIlN2oziRoow"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sgaD41IeRorG"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6tnLcVOjRotc"},"outputs":[],"source":[]}],"metadata":{"colab":{"authorship_tag":"ABX9TyMYxidoiKa5UpRYXjIQdpCI","name":"","version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}